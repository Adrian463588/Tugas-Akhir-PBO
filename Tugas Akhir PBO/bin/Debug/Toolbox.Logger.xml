<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Toolbox.Logger</name>
    </assembly>
    <members>
        <member name="T:System.LoggedArgs">
            <summary>
            Delegate for the Logged event, which provides the tag, message and format
            parts (if any)
            </summary>
        </member>
        <member name="T:System.Log">
            <summary>
            Static class that provides access to logging to a global log channel
            </summary>
        </member>
        <member name="F:System.Log.Global">
            <summary>
            Accesses the global log channel
            </summary>
        </member>
        <member name="M:System.Log.QuickSetup(System.LogLevels)">
            <summary>
            Quickly sets up and attaches a <see cref="T:System.ConsoleLogger"/> and automatically
            sets the level to <see cref="F:System.LogLevels.All"/>
            </summary>
            <param name="level">Set a custom log level</param>
        </member>
        <member name="M:System.Log.Attach(System.ILogger)">
            <summary>
            Attaches a logger to the global log channel
            </summary>
        </member>
        <member name="M:System.Log.Detach(System.ILogger)">
            <summary>
            Detaches a logger from the global log channel
            </summary>
        </member>
        <member name="M:System.Log.DetachAll(System.ILogger)">
            <summary>
            Detaches all loggers from the global log channel
            </summary>
        </member>
        <member name="M:System.Log.Fine(System.String,System.String,System.Object[])">
            <summary>
            Logs a fine level message, which is useful for debugging loops or functions
            called within seconds of other fuctions
            </summary>
            <param name="tag">Name of class or section this log is from</param>
            <param name="message">Log message in formattable form</param>
            <param name="parts">Data for any formatting parameters in the message</param>
        </member>
        <member name="M:System.Log.Debug(System.String,System.String,System.Object[])">
            <summary>
            Logs a debug level message, which is useful for minor functions such as
            opening a form or dialog
            </summary>
            <param name="tag">Name of class or section this log is from</param>
            <param name="message">Log message in formattable form</param>
            <param name="parts">Data for any formatting parameters in the message</param>
        </member>
        <member name="M:System.Log.Info(System.String,System.String,System.Object[])">
            <summary>
            Logs an informational level message, which is useful for reports made at an
            interval such as memory usage or for major state changes such as successful
            login
            </summary>
            <param name="tag">Name of class or section this log is from</param>
            <param name="message">Log message in formattable form</param>
            <param name="parts">Data for any formatting parameters in the message</param>
        </member>
        <member name="M:System.Log.Warn(System.String,System.String,System.Object[])">
            <summary>
            Logs a warning level message, which is useful for when something goes wrong or
            unexpected data is received, but the program / assembly can carry on as normal
            </summary>
            <param name="tag">Name of class or section this log is from</param>
            <param name="message">Log message in formattable form</param>
            <param name="parts">Data for any formatting parameters in the message</param>
        </member>
        <member name="M:System.Log.Severe(System.String,System.String,System.Object[])">
            <summary>
            Logs a severe level message, which is useful for exceptions and other critical
            errors where a thread or program is unable to continue
            </summary>
            <param name="tag">Name of class or section this log is from</param>
            <param name="message">Log message in formattable form</param>
            <param name="parts">Data for any formatting parameters in the message</param>
        </member>
        <member name="M:System.Log.LogStackTrace(System.Exception)">
            <summary>
            Extension method that outputs an exception's message and its stack trace
            to the logger as Severe level
            </summary>
        </member>
        <member name="M:System.Log.LogFullStackTrace(System.Exception)">
            <summary>
            Extension method that recurses through inner exceptions, log all stack
            traces
            </summary>
        </member>
        <member name="P:System.Log.Level">
            <summary>
            Gets or sets the current global channel's logging level. Set to "Production"
            by default.
            </summary>
        </member>
        <member name="T:System.ConsoleLogger">
            <summary>
            Thread-safe logger that writes to console using colors for each log level.
            Can be paused; queues messages up optionally
            </summary>
        </member>
        <member name="T:System.ILogger">
            <summary>
            For implementing a class which handles log messages of all levels to any output,
            such as console or file. Can be paused.
            </summary>
        </member>
        <member name="M:System.ILogger.Emit(System.LogChannel,System.LogLevels,System.String,System.String,System.Object[])">
            <summary>
            Called by a <see cref="T:System.LogChannel"/> when a log message is emitted that is
            allowed by its currently set <see cref="T:System.LogLevel"/>
            </summary>
        </member>
        <member name="E:System.ILogger.Pause">
            <summary>
            Fired when the logger is paused; passes true or false for pause and unpause
            respectively
            </summary>
        </member>
        <member name="P:System.ILogger.Paused">
            <summary>
            Gets or sets if this logger is paused
            </summary>
        </member>
        <member name="F:System.ConsoleLogger.FineColor">
            <summary>
            Gets or sets text color for fine-level logs. Default is DarkGray.
            </summary>
        </member>
        <member name="F:System.ConsoleLogger.DebugColor">
            <summary>
            Gets or sets text color for debug-level logs. Default is Gray.
            </summary>
        </member>
        <member name="F:System.ConsoleLogger.InfoColor">
            <summary>
            Gets or sets text color for info-level logs. Default is White.
            </summary>
        </member>
        <member name="F:System.ConsoleLogger.WarnColor">
            <summary>
            Gets or sets text color for warn-level logs. Default is Yellow.
            </summary>
        </member>
        <member name="F:System.ConsoleLogger.SevereColor">
            <summary>
            Gets or sets text color for severe-level logs. Default is Red.
            </summary>
        </member>
        <member name="F:System.ConsoleLogger.AutoPrintBacklog">
            <summary>
            Sets whether to automatically print all log entries queued up whilst this
            logger is paused. If true, this logger will buffer entries in memory, else
            messages get dropped.
            </summary>
        </member>
        <member name="F:System.ConsoleLogger.TagPadding">
            <summary>
            Gets or sets the tag padding. If set to than zero, this logger will pad the
            tags of logs with spaces for enhanced readability.
            </summary>
        </member>
        <member name="F:System.ConsoleLogger.MessageFormat">
            <summary>
            Gets or sets the format of each log entry's message. Must at least include:
            - "{0}" for the tag
            - "{1}" for the message
            </summary>
            <example>Default is "{0} {1}"</example>
        </member>
        <member name="M:System.ConsoleLogger.printBacklog">
            <summary>
            Goes through the backlog buffer and logs every entry, clearing the buffer
            as it does
            </summary>
        </member>
        <member name="M:System.ConsoleLogger.Emit(System.LogChannel,System.LogLevels,System.String,System.String,System.Object[])">
            <summary>
            Prints log messages to console with appropriate color or queues messages
            to buffer if paused
            </summary>
        </member>
        <member name="E:System.ConsoleLogger.Pause">
            <summary>
            Fired when this console logger is paused. Passes the new pause value.
            </summary>
        </member>
        <member name="P:System.ConsoleLogger.Paused">
            <summary>
            Gets or sets pause state
            </summary>
            <seealso cref="F:System.ConsoleLogger.AutoPrintBacklog"/>
        </member>
        <member name="T:System.Loggers.FileLogger">
            <summary>
            Thread-safe logger that appends to file. Can be paused.
            </summary>
        </member>
        <member name="F:System.Loggers.FileLogger.WriteTimestamp">
            <summary>
            Gets or sets if this logger writes timestamps next to log entries
            </summary>
        </member>
        <member name="M:System.Loggers.FileLogger.#ctor(System.String)">
            <summary>
            Creates a file logger that appends to the specified relative or absolute
            path. To begin logging, set the Paused property to false.
            </summary>
        </member>
        <member name="M:System.Loggers.FileLogger.Finalize">
            <summary>
            Automatic flush and close of the file upon deconstruction
            </summary>
        </member>
        <member name="M:System.Loggers.FileLogger.Emit(System.LogChannel,System.LogLevels,System.String,System.String,System.Object[])">
            <summary>
            Appends log messages to file with timestamp, level and message
            </summary>
        </member>
        <member name="M:System.Loggers.FileLogger.beginStream">
            <summary>
            Sets up a new file stream from the current set path
            </summary>
        </member>
        <member name="M:System.Loggers.FileLogger.flushAndClose">
            <summary>
            Finalizes the file stream and sets it to null for a new one
            </summary>
        </member>
        <member name="E:System.Loggers.FileLogger.Pause">
            <summary>
            Fired when this file logger is paused; passes true or false for pause and
            unpause respectively
            </summary>
        </member>
        <member name="P:System.Loggers.FileLogger.File">
            <summary>
            Gets or sets the absolute or relative target file path. Setting it will
            close any previous stream
            </summary>
        </member>
        <member name="P:System.Loggers.FileLogger.Paused">
            <summary>
            Gets or sets pause state
            </summary>
        </member>
        <member name="T:System.LogChannel">
            <summary>
            Represents a channel in which log messages can be emitted from and loggers
            may be attached to
            </summary>
        </member>
        <member name="M:System.LogChannel.Attach(System.ILogger)">
            <summary>
            Attaches a logger to this channel
            </summary>
        </member>
        <member name="M:System.LogChannel.Detach(System.ILogger)">
            <summary>
            Detaches a logger from this channel
            </summary>
        </member>
        <member name="M:System.LogChannel.DetachAll">
            <summary>
            Detaches all loggers from this channel
            </summary>
        </member>
        <member name="M:System.LogChannel.Fine(System.String,System.String,System.Object[])">
            <summary>
            Logs a fine level message, which is useful for debugging loops or functions
            called within seconds of other fuctions
            </summary>
            <param name="tag">Name of class or section this log is from</param>
            <param name="message">Log message in formattable form</param>
            <param name="parts">Data for any formatting parameters in the message</param>
        </member>
        <member name="M:System.LogChannel.Debug(System.String,System.String,System.Object[])">
            <summary>
            Logs a debug level message, which is useful for minor functions such as
            opening a form or dialog
            </summary>
            <param name="tag">Name of class or section this log is from</param>
            <param name="message">Log message in formattable form</param>
            <param name="parts">Data for any formatting parameters in the message</param>
        </member>
        <member name="M:System.LogChannel.Info(System.String,System.String,System.Object[])">
            <summary>
            Logs an informational level message, which is useful for reports made at an
            interval such as memory usage or for major state changes such as successful
            login
            </summary>
            <param name="tag">Name of class or section this log is from</param>
            <param name="message">Log message in formattable form</param>
            <param name="parts">Data for any formatting parameters in the message</param>
        </member>
        <member name="M:System.LogChannel.Warn(System.String,System.String,System.Object[])">
            <summary>
            Logs a warning level message, which is useful for when something goes wrong or
            unexpected data is received, but the program / assembly can carry on as normal
            </summary>
            <param name="tag">Name of class or section this log is from</param>
            <param name="message">Log message in formattable form</param>
            <param name="parts">Data for any formatting parameters in the message</param>
        </member>
        <member name="M:System.LogChannel.Severe(System.String,System.String,System.Object[])">
            <summary>
            Logs a severe level message, which is useful for exceptions and other critical
            errors where a thread or program is unable to continue
            </summary>
            <param name="tag">Name of class or section this log is from</param>
            <param name="message">Log message in formattable form</param>
            <param name="parts">Data for any formatting parameters in the message</param>
        </member>
        <member name="M:System.LogChannel.LogStackTrace(System.Exception)">
            <summary>
            Outputs an exception's message and its stack trace through this channel
            as Severe level
            </summary>
        </member>
        <member name="M:System.LogChannel.LogFullStackTrace(System.Exception)">
            <summary>
            Recursively outputs an exception's message and its stack trace, along with
            that of inner exceptions, through this channel as Severe level
            </summary>
        </member>
        <member name="P:System.LogChannel.Level">
            <summary>
            Gets or sets this channel's current logging level. Set to "Production" by
            default.
            </summary>
        </member>
        <member name="E:System.LogChannel.Logged">
            <summary>
            Fires when a log is emitted through this channel but only if the channel's
            logging level allows for it
            </summary>
        </member>
        <member name="T:System.LogLevels">
            <summary>
            Flag enum that contains both specific levels and meta levels that enable multiple
            types of logging
            </summary>
        </member>
        <member name="F:System.LogLevels.None">
            <summary>
            No logging
            </summary>
        </member>
        <member name="F:System.LogLevels.Fine">
            <summary>
            Debugging loops and intricate micro-timed functions
            </summary>
        </member>
        <member name="F:System.LogLevels.Debug">
            <summary>
            Debugging minor functions
            </summary>
        </member>
        <member name="F:System.LogLevels.Info">
            <summary>
            Reports at an interval, load messages
            </summary>
        </member>
        <member name="F:System.LogLevels.Warning">
            <summary>
            Something goes wrong or unexpected data, but not critical
            </summary>
        </member>
        <member name="F:System.LogLevels.Severe">
            <summary>
            Critical error, crash or something stopping software / assembly
            </summary>
        </member>
        <member name="F:System.LogLevels.All">
            <summary>
            All logging levels
            </summary>
        </member>
        <member name="F:System.LogLevels.Debugging">
            <summary>
            Quieter debug levels (no fine)
            </summary>
        </member>
        <member name="F:System.LogLevels.Production">
            <summary>
            Production levels (no debug/fine)
            </summary>
        </member>
    </members>
</doc>
